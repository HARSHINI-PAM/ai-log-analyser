pipeline {
    agent any
    environment {
        DOCKER_BUILDKIT = '1'
        REGISTRY = '' // Set this for push stage if needed
    }
    stages {
        stage('Checkout code') {
            steps {
                checkout scm
            }
        }

        stage('Build backend Docker image') {
            steps {
                dir('backend') {
                    sh 'docker build -t ai-log-rootcause-backend .'
                }
            }
        }
        
        stage('Build frontend Docker image') {
            steps {
                dir('frontend') {
                    sh 'docker build -t ai-log-rootcause-frontend .'
                }
            }
        }

        stage('Run backend unit tests') {
            steps {
                dir('backend') {
                    sh 'pip install -r requirements.txt pytest'
                    sh 'pytest || true' // Avoid fail if no tests yet
                }
            }
        }

        stage('Integration Test') {
            steps {
                dir('backend') {
                    sh 'pip install -r requirements.txt pytest'
                    sh 'pytest tests --maxfail=1 --disable-warnings'
                }
            }
        }

        stage('Build & Push Docker images (optional)') {
            when {
                expression { env.REGISTRY != '' }
            }
            steps {
                sh 'docker tag ai-log-rootcause-backend $REGISTRY/ai-log-rootcause-backend:latest'
                sh 'docker tag ai-log-rootcause-frontend $REGISTRY/ai-log-rootcause-frontend:latest'
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                  sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                  sh 'docker push $REGISTRY/ai-log-rootcause-backend:latest'
                  sh 'docker push $REGISTRY/ai-log-rootcause-frontend:latest'
                }
            }
        }

        stage('Deploy (docker-compose up)') {
            steps {
                sh 'docker-compose up -d --build'
            }
        }
    }
}
